SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!BotonAccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	bloque:		<Object>	bloqueAccion:		<Object>    Implementation Points!!BotonAccion methodsFor: 'as yet unclassified' stamp: 'Yohpex 8/1/2017 19:56'!mouseAction: unBloquebloqueAccion := unBloque.! !!BotonAccion methodsFor: 'as yet unclassified' stamp: 'Yohpex 8/1/2017 19:56'!mouseUp: unEventosuper mouseUp: unEvento.bloqueAccion value.! !Object subclass: #CeldaMundo	instanceVariableNames: 'miCoordenada'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!CeldaMundo commentStamp: '32 7/31/2017 22:25' prior: 0!Clase padre de Colonia y FuenteComida que establece su comportamiento basico de celdas en una matriz que representa el mundo.!!CeldaMundo methodsFor: 'Modificadores' stamp: '32 7/31/2017 22:34'!setCoordenada: unaCoordenada	"Metodo que establece las coordenadas de una celda"	miCoordenada := unaCoordenada! !!CeldaMundo methodsFor: 'Modificadores' stamp: '32 7/31/2017 22:34'!iniCelda: coordenada	"Metodo con polimorfismo que inicializa una celda"	self setCoordenada: coordenada! !!CeldaMundo methodsFor: 'Observadores' stamp: '32 7/31/2017 22:34'!getCoordenada	"Metodo que retorna las coordenadas de una celda"	^ miCoordenada! !!CeldaMundo methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:35'!verificarCelda	"Metodo que verifica si una celda es de la clase CeldaMundo"	^ self isMemberOf: CeldaMundo! !!CeldaMundo methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:42'!equals: unaCelda	"Metodo que compara dos celdas"	^ self = unaCelda! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CeldaMundo class	instanceVariableNames: ''!!CeldaMundo class methodsFor: 'Constructor' stamp: 'sdf 6/23/2017 19:45'!crearCelda:coordenada	"comment stating purpose of message"	|tmp|	tmp:= self new.	tmp iniCelda: coordenada.	^tmp! !BorderedMorph subclass: #CeldaMundoVisual	instanceVariableNames: 'miCoordenada miMundo miMundoVisual celdaL celdaR celdaT celdaB'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!CeldaMundoVisual commentStamp: '32 7/31/2017 22:26' prior: 0!Clase visual de CeldaMundo.!!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 17:21'!agregarHermanoR:argceldaR :=arg.! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'sdf 7/5/2017 18:57'!setCoordenada: unaCoordenada	miCoordenada := unaCoordenada 		! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 17:21'!agregarHermanoB:argceldaB :=arg.! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 16:21'!agregarHermanosR:arg1 left:arg2 top:arg3 bot:arg4celdaR :=arg1.celdaL :=arg2.celdaT :=arg3.celdaB :=arg4.! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'YAUPe 7/5/2017 21:35'!setMiMundoVisual:visualmiMundoVisual :=visual.! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 17:21'!agregarHermanoL:argceldaL :=arg.! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 17:21'!agregarHermanoT:argceldaT :=arg.! !!CeldaMundoVisual methodsFor: 'Modificadoras' stamp: 'sdf 7/5/2017 19:20'!setMundo: unMundo	miMundo := unMundo 		! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'sdf 7/5/2017 19:20'!getMundo^ miMundo		! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'YAUPe 7/5/2017 21:35'!getMiMundoVisual^miMundoVisual ! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'asd 7/21/2017 16:32'!getBot^celdaB ! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'asd 7/21/2017 16:32'!getRight^celdaR ! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'asd 7/21/2017 16:32'!getLeft^celdaL ! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'sdf 7/5/2017 19:14'!getCoordenada	"comment stating purpose of message"	^miCoordenada ! !!CeldaMundoVisual methodsFor: 'Observadoras' stamp: 'asd 7/21/2017 16:32'!getTop^celdaT ! !!CeldaMundoVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/5/2017 18:38'!handlesMouseDown: unEvento^ true! !!CeldaMundoVisual methodsFor: 'as yet unclassified' stamp: 'asd 7/21/2017 17:38'!mouseDown: unEvento	| opcion obreras guerreras exploradoras coloniaVisual fuenteVisual |	unEvento yellowButtonPressed		ifTrue: [ opcion := UIManager default				chooseFrom: #('Colonia' 'Fuente de Comida')				lines: #(2)				message: 'Elija una opción'.			opcion = 1				ifTrue: [ obreras := (UIManager default request: 'Que cantidad de obreras') asNumber.					guerreras := (UIManager default request: 'Que cantidad de guerreras') asNumber.					exploradoras := (UIManager default request: 'Que cantidad de exploradoras') asNumber.					coloniaVisual := self getMiMundoVisual						agregarColonia: self position						obreras: obreras						exploradoras: exploradoras						guerreras: guerreras						coor: self getCoordenada						miCelda:self ].			opcion = 2				ifTrue: [ fuenteVisual := self getMiMundoVisual agregarFuente: self position.					self getMundo agregarUnaFuenteDeComida: self getCoordenada fuenteV: fuenteVisual ] ].	self changed! !!CeldaMundoVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/9/2017 21:36'!update: unObjeto	self update: unObjeto		! !!CeldaMundoVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/13/2017 20:27'!initialize	super initialize.	self borderWidth: 2.	bounds := 0 @ 0 corner: 50 @ 50.	self useSquareCorners.		self color: Color lightBlue.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CeldaMundoVisual class	instanceVariableNames: ''!!CeldaMundoVisual class methodsFor: 'as yet unclassified' stamp: 'sdf 7/9/2017 21:10'!crearNuevaCeldaFila: i columna: j cuadro: unCuadro mundo: unMundo mundoVisual:visual"creado para grafica""Crea una celda para la posición (i,j) y la agrega al mundo visual."| c origen coor |c := self new.c setMiMundoVisual:visual.origen := unCuadro innerBounds origin.unCuadro addMorph: c.c position: ((j - 1) * (c width )) @ ((i - 1) * (c height )) + origen + (10@25).coor := Coordenada crearCoordenadax: i y: j.c setCoordenada: coor.c setMundo: unMundo.^c.! !CeldaMundo subclass: #Colonia	instanceVariableNames: 'misHormigas comidaTotal viva'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Colonia commentStamp: '32 7/31/2017 22:25' prior: 0!Clase que se encarga de crear, eliminar y hacer actuar a las hormigas, dandole ordenes como atacar a otras colonias y recolectar comida. Una colonia muere si su hormiga reina muere.!!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:36'!atacar: unMensaje	"Metodo que recibe como parametro a otra colonia y envia guerreras a atacar"	| guerreras i |	guerreras := misHormigas		select: [ :cadaHormiga | 			(cadaHormiga verificarGuerrera				and: [ cadaHormiga getObjetivo = self ])				and: [ cadaHormiga getPosicion = self ] ].	guerreras size >= 5		ifTrue: [ i := 5 ]		ifFalse: [ i := guerreras size ].	1 to: i do: [ :n | (guerreras at: n) enviarObjetivo: unMensaje ].	Transcript		show: 'Se enviaron: ' , i asString , ' hormigas a atacar';		cr! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:04'!recibirMensaje: unMensaje	"Metodo que recibe una celda como parametro y dependiendo de su tipo llama a los metodos apropiados"	Transcript		show: 'Se notifico un mensaje';		cr.	(unMensaje isMemberOf: Colonia)		ifTrue: [ self atacar: unMensaje ]		ifFalse: [ self recolectar: unMensaje ]! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:35'!agregarHormiga: hormiga	"Metodo que recibe una hormiga por parametro y la agrega a la colonia"	misHormigas add: hormiga! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:06'!verificarComida	"Metodo que verifica si hay suficiente comida para alimentar a una hormiga y si la hay la sustrae de la comida total de la colonia"	| res |	res := false.	comidaTotal > 0		ifTrue: [ res := true.			comidaTotal := comidaTotal - 1 ].	^ res! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:59'!darBotin"Metodo que retorna toda la comida restante de la colonia, cuando esta es vencida en combate"	^comidaTotal! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:03'!pelear: hormiga	"Metodo que recibe una hormiga como parametro y determina si la defensa es exitosa o no"	| defensora ataque defensa res |	defensora := misHormigas		detect: [ :cadaH | cadaH verificarGuerrera ]		ifNone: [ defensora := nil ].	defensora isNil		ifTrue: [ defensora := misHormigas				detect: [ :unaHormiga | unaHormiga verificarReina ] ].	ataque := 100 atRandom.	defensa := 100 atRandom.	ataque = defensa		ifTrue: [ res := true ]		ifFalse: [ ataque > defensa				ifTrue: [ self eliminarHormiga: defensora.					res := true ]				ifFalse: [ res := false ] ].	^ res! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:04'!recolectar: unMensaje	"Metodo que recibe a una fuente de comida como parametro y envia a obreras a recolectar"	| obreras i |	obreras := misHormigas		select: [ :cadaHormiga | 			(cadaHormiga verificarObrera				and: [ cadaHormiga getObjetivo = self ])				and: [ cadaHormiga getPosicion = self ] ].	obreras size >= 5		ifTrue: [ i := 5 ]		ifFalse: [ i := obreras size ].	1 to: i do: [ :n | (obreras at: n) enviarObjetivo: unMensaje ].	Transcript		show: 'Se enviaron: ' , i asString , ' hormigas a recolectar';		cr! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:37'!borrarDependientes"Metodo que ejecuta el mensaje changed de cada hormiga de la colonia, indicando que su respectivo dependiente debe desaparecer del mundo visual"	2 to: misHormigas size do: [ :i | (misHormigas at: i) changed: 5 ]! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:57'!cargaAutomatica: unMundo	"Metodo que realiza una precarga automatica de las hormiga de la colonia"	self agregarHormiga: (Reina crearHormiga: self mundo: unMundo).	1 to: 10 do:		[ :x | self agregarHormiga: (Obrera crearHormiga: self mundo: unMundo) ].	1 to: 10 do:		[ :x | self agregarHormiga: (Guerrera crearHormiga: self mundo: unMundo) ].	1 to: 5 do: [ :x | 		self			agregarHormiga: (Exploradora crearHormiga: self mundo: unMundo) ]! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:59'!ejecutarColonia	"Metodo que se encarga de hacer actuar a todas las hormigas de la colonia"	| colec n |	n := 0.	colec := misHormigas select: [ :ch | ch isNotNil ].	1 to: colec size do: [ :i | (colec at: i) actuar ]! !!Colonia methodsFor: 'Aplicacion' stamp: 'sdf 8/2/2017 00:08'!eliminarHormiga: hormiga	"Metodo que recibe por parametro y elimina una hormiga. Si la hormiga que muere es la reina se encarga de eliminar a la colonia del mundo tambien"	| elMundo |	hormiga verificarReina		ifTrue: [ Transcript				show: 'Murio la colonia';				cr.			elMundo := hormiga getMiMundo.			self borrarDependientes.			elMundo eliminarColonia: self ]		ifFalse: [ hormiga changed: 5.			misHormigas remove: hormiga ]! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:05'!setMuerta	"Metodo que establece a una colonia como muerta"		viva:=false.	self changed! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:36'!agregarDependientes: coleccionHVisuales"Metodo que recibe una colleccion de hormigas visuales y le agrega a cada hormiga virtual, el dependiente correspondiente a su clase"	2 to: misHormigas size do:[ :i | (misHormigas at: i) addDependent: (coleccionHVisuales at: i-1) ]! !!Colonia methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:00'!entregarComida: cant	"Metodo que recibe una cantidad de comida como parametro y la agrega a la comida total de la colonia"	Transcript		show: 'Una obrera regreso con comida a la colonia';		cr.	comidaTotal := comidaTotal + cant! !!Colonia methodsFor: 'Observadores' stamp: '32 7/31/2017 23:05'!resaltar"Metodo que envia el mensaje changed a cada hormiga de la colonia, para que sus dependientes visuales se resalten en el mundo, cuando su colonia es la ganadora"	misHormigas do: [ :cadaHormiga | cadaHormiga changed: 6 ]! !!Colonia methodsFor: 'Observadores' stamp: '32 7/31/2017 23:00'!estoyViva	"Metodo que confirma si la colonia esta viva"	^ viva! !!Colonia methodsFor: 'as yet unclassified' stamp: 'YAUPe 7/6/2017 14:35'!cargaAutomatica2: unMundo obreras:ob exploradoras:ex guerreras:gu"creado para grafica"	self agregarHormiga: (Reina crearHormiga: self mundo: unMundo).	1 to: ob  do: [ :x | self agregarHormiga: (Obrera crearHormiga: self mundo: unMundo) ].	1 to: gu do: [ :x | self agregarHormiga: (Guerrera crearHormiga: self mundo: unMundo) ].	1 to: ex do: [ :x | self agregarHormiga: (Exploradora crearHormiga: self mundo: unMundo) ]! !!Colonia methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:06'!setViva	"Metodo que establece si una colonia esta viva o muerta"	viva := true! !!Colonia methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:03'!iniCelda: coor	"Metodo con polimorfismo que inicializa una celda"	super iniCelda: coor.	self iniMisHormigas.	self iniComidaTotal.	self setViva! !!Colonia methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:01'!iniMisHormigas	"Metodo que inicializa la coleccion de hormigas de una colonia"	misHormigas := OrderedCollection new! !!Colonia methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:03'!iniComidaTotal	"Metodo que inicializa la comida de una colonia"	comidaTotal := 2000! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Colonia class	instanceVariableNames: ''!!Colonia class methodsFor: 'as yet unclassified' stamp: 'asd 7/22/2017 15:16'!crearColoniaAutomatica: unaCoordenada mundo: unMundo obreras:ob exploradoras:ex guerreras:gu"creado para grafica"	|colonia|	colonia := Colonia crearCelda: unaCoordenada.	colonia cargaAutomatica2:unMundo obreras:ob exploradoras:ex guerreras:gu.	colonia iniComidaTotal  .	colonia setViva .	^ colonia.	! !CeldaMundoVisual subclass: #ColoniaVisual	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!ColoniaVisual commentStamp: '32 7/31/2017 22:26' prior: 0!Clase visual de Colonia.!!ColoniaVisual methodsFor: 'as yet unclassified' stamp: 'asd 7/25/2017 13:13'!initialize	| c |	super initialize.	self color: Color red.	! !!ColoniaVisual methodsFor: 'as yet unclassified' stamp: '32 7/28/2017 23:09'!update: unaColonia	unaColonia estoyViva		ifFalse: [ self color: Color black ]! !Object subclass: #Coordenada	instanceVariableNames: 'x y'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Coordenada commentStamp: '32 7/31/2017 22:27' prior: 0!Clase que represente las coordenadas de cada celda en la matriz que representa el mundo.!!Coordenada methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:09'!inix: arg1 y: arg2	"Metodo que inicializa una coordenada"	x := arg1.	y := arg2! !!Coordenada methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:09'!setX: unValor	"Metodo que modifica el valor de abscisas"	x := unValor! !!Coordenada methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:10'!setY: unValor	"Metodo que modifica el valor de ordenadas"	y := unValor! !!Coordenada methodsFor: 'Observadores' stamp: '32 7/31/2017 23:09'!getX	"Metodo que retorna el valor de abscisas"	 ^x! !!Coordenada methodsFor: 'Observadores' stamp: '32 7/31/2017 23:09'!getY	"Metodo que retorna el valor de ordenadas"	 ^y! !!Coordenada methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:09'!equals: unaCoordenada	"Metodo que compara dos coordenadas"	^ self getX = unaCoordenada getX and: self getY = unaCoordenada getY! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Coordenada class	instanceVariableNames: ''!!Coordenada class methodsFor: 'as yet unclassified' stamp: 'sdf 7/9/2017 21:10'!crearCoordenadax:arg1 y:arg2|nueva|nueva:=Coordenada new.nueva inix:arg1 y:arg2.^nueva! !CeldaMundo subclass: #FuenteComida	instanceVariableNames: 'cantAlimento'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!FuenteComida commentStamp: '32 7/31/2017 22:25' prior: 0!Clase que se encarga de contener alimento para que hormigas trabajadoras recolecten y entregen a sus colonias.!!FuenteComida methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:08'!sustraerComida	"Metodo que establece la cantidad de comida que una obrera puede extraer de una fuente de alimento"	| cant |	cant := 0.	cantAlimento > 0 & (cantAlimento > 3)		ifTrue: [ cant := self sustraerNormal ]		ifFalse: [ cant := self sustraerLoqueQueda ].	^ cant! !!FuenteComida methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:08'!sustraerNormal	"Metodo que retorna cuanta comida sustraera una obrera de la fuente de comida"	| cant |	Transcript		show: 'Se sustrajo comida';		cr.	cant := 3.	cantAlimento := cantAlimento - 3.	^ cant! !!FuenteComida methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:08'!sustraerLoqueQueda	"Metodo que retorna toda la comida restante en una fuente de comida"	| cant |	Transcript		show: 'Se sustrajo comida y se vacio la fuente de comida';		cr.	cant := cantAlimento.	cantAlimento := 0.	self changed.	^ cant! !!FuenteComida methodsFor: 'Observadores' stamp: '32 7/31/2017 23:07'!getCant"Metodo que retorna la cantidad actual de comida de comida de la fuente de comida"	^ cantAlimento! !!FuenteComida methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:08'!iniCelda: coor	"Metodo con polimorfismo que inicializa una celda"	super iniCelda: coor.	self iniCantAlimento! !!FuenteComida methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:07'!iniCantAlimento	"Metodo que inicializa la comida de una fuente de comida"	cantAlimento := 500! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FuenteComida class	instanceVariableNames: ''!!FuenteComida class methodsFor: 'as yet unclassified' stamp: '32 7/31/2017 23:30'!crearFuenteAutomatica: unaCoordenada 	|fuente|	fuente := FuenteComida  crearCelda: unaCoordenada.	^ fuente.	! !CeldaMundoVisual subclass: #FuenteComidaVisual	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!FuenteComidaVisual commentStamp: '32 7/31/2017 22:27' prior: 0!Clase visual de FuenteComida.!!FuenteComidaVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/13/2017 20:25'!initialize	| c |	super initialize.	self color: Color green.	c := 'X' asMorph.	c color: Color transparent.	self addMorphCentered: c! !!FuenteComidaVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/18/2017 18:38'!update: unaFuente	unaFuente getCant = 0		ifTrue: [ self lastSubmorph color: Color blue]! !Object subclass: #Hormiga	instanceVariableNames: 'miPosicion miColonia miMundo'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Hormiga commentStamp: '32 7/31/2017 22:27' prior: 0!Clase que establece el comportamiento base de las hormigas.!!Hormiga methodsFor: 'Aplicacion' stamp: 'sdf 8/2/2017 00:11'!moverse: destino	"Metodo que recibe una celda como parametro y mueve a la hormiga hacia ella"	| x1 y1 x2 y2 direccion |	x1 := self getPosicion getCoordenada getX.	y1 := self getPosicion getCoordenada getY.	x2 := destino getCoordenada getX.	y2 := destino getCoordenada getY.	destino getCoordenada = self getPosicion getCoordenada		ifFalse: [ y1 = y2				ifTrue: [ x1 > x2						ifTrue: [ x1 := x1 - 1.							direccion := 3 ]						ifFalse: [ x1 := x1 + 1.							direccion := 4							"subo la fila" ]					"bajo la fila" ]				ifFalse: [ x1 = x2						ifTrue: [ y1 > y2								ifTrue: [ y1 := y1 - 1.									"voy para atras en la columna"									direccion := 1 ]								ifFalse: [ y1 := y1 + 1.									"voy para adelante en la columna"									direccion := 2 ]							"si estoy en columna mayor" ]						ifFalse: [ y1 < y2								ifTrue: [ y1 := y1 + 1.									"voy para adelante en la columna"									direccion := 2 ]								ifFalse: [ y1 < 1										ifFalse: [ y1 := y1 - 1.											"voy para atras en la columna"											direccion := 1 ]									"estoy en una columna menor" ] ]					"misma fila" ].			"si estan en misma columna"			self setMiPosicion: (miMundo recuperarX: x1 Y: y1).						self changed: direccion ]! !!Hormiga methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:15'!verificarReina	"Metodo que establece si una hormiga es reina"	^ self isMemberOf: Reina! !!Hormiga methodsFor: 'Aplicacion' stamp: 'sdf 8/2/2017 00:11'!comer	"Metodo que se encarga de hacer comer a una hormiga"	| resp |	resp := miColonia verificarComida.	resp		ifFalse: [ miColonia eliminarHormiga: self ].	^ resp! !!Hormiga methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:15'!verificarObrera	"Metodo que establece si una hormiga es obrera"	^ self isMemberOf: Obrera! !!Hormiga methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:15'!verificarGuerrera	"Metodo que verifica si una hormiga es guerrera"	^ self isMemberOf: Guerrera! !!Hormiga methodsFor: 'Aplicacion' stamp: 'AgustinVidal 6/18/2017 15:57'!actuar	"comment stating purpose of message"	self subclassResponsibility.! !!Hormiga methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:15'!setMiMundo: unMundo	"Metodo que establece el mundo al que pertenece una hormiga"	miMundo := unMundo! !!Hormiga methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:12'!setMiColonia: unaColonia	"Metodo que establece la colonia de una hormiga"	miColonia := unaColonia.! !!Hormiga methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:11'!inicializar: unaColonia mundo: unMundo	"Metodo polimorfico que inicializa una hormiga"	self setMiColonia: unaColonia.	self setMiPosicion: unaColonia.	self setMiMundo: unMundo.	self inicializarAux! !!Hormiga methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:11'!inicializarAux	self subclassResponsibility! !!Hormiga methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:15'!setMiPosicion: nuevaPosicion	"Metodo que recibe una celda como parametro y la establece como posicion de una hormiga"	miPosicion := nuevaPosicion! !!Hormiga methodsFor: 'Observadores' stamp: '32 7/31/2017 23:11'!getMiMundo	"Metodo que retorna el mundo al que pertenece una hormiga"	^ miMundo! !!Hormiga methodsFor: 'Observadores' stamp: '32 7/31/2017 23:11'!getPosicion	"Metodo que retorna la celda donde se encuentra una hormiga"	^ miPosicion! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hormiga class	instanceVariableNames: ''!!Hormiga class methodsFor: 'Constructor' stamp: '32 7/28/2017 23:02'!crearHormiga: unaColonia mundo: unMundo	| nuevaHormiga |	nuevaHormiga := self new.		nuevaHormiga inicializar: unaColonia mundo: unMundo.	^ nuevaHormiga! !Hormiga subclass: #Exploradora	instanceVariableNames: 'explorado mensaje'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Exploradora commentStamp: '32 7/31/2017 22:27' prior: 0!Clase que representa hormigas exploradoras. Estas recorren el mundo hasta encontrar una fuente de comida o una colonia y cuando esto sucede le avisan a su colonia de su ubicacion.!!Exploradora methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:16'!inicializarAux	"Metodo polimorfico que inicializa los atributos especificos de exploradora"	self iniMensaje.	self iniExplorado! !!Exploradora methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:16'!iniMensaje	"Metodo que inicializa el atributo que representara una puntero a una celda hallada por la exploradora"	mensaje := nil! !!Exploradora methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:16'!iniExplorado	"Metodo que inicializa la coleccion de celdas exploradas de una exploradora"	explorado := OrderedCollection new! !!Exploradora methodsFor: 'Aplicacion' stamp: 'sdf 8/2/2017 00:12'!explorar	"Metodo que hace explorar a una exploradora aleatoriamente y si encuentra una fuente de comida u otra colonia guarda un puntero"	| dirAux coorX coorY |	dirAux := 4 atRandom.	coorX := miPosicion getCoordenada getX.	coorY := miPosicion getCoordenada getY.	dirAux = 1		ifTrue: [ coorX > 1				ifTrue: [ coorX := coorX - 1 ] ]		ifFalse: [ dirAux = 2				ifTrue: [ coorY > 1						ifTrue: [ coorY := coorY - 1 ] ]				ifFalse: [ dirAux = 3						ifTrue: [ coorX < 10								ifTrue: [ coorX := coorX + 1 ] ]						ifFalse: [ coorY < 10								ifTrue: [ coorY := coorY + 1 ] ] ] ].	coorY <= 10		ifTrue: [ coorY >= 1				ifTrue: [ coorX <= 10						ifTrue: [ coorX >= 1								ifTrue: [ self moverse: (miMundo recuperarX: coorX Y: coorY) ] ] ] ].	explorado add: miPosicion.	miPosicion verificarCelda		ifFalse: [ miPosicion = miColonia				ifFalse: [ mensaje := miPosicion.					Transcript						show: 'Una exploradora encontro algo';						cr ] ].	explorado size >= 50		ifTrue: [ explorado := OrderedCollection new ]! !!Exploradora methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:15'!actuar	"Metodo que se encarga de hacer actuar a una exploradora"	mensaje isNil		ifTrue: [ self explorar ]		ifFalse: [ self moverse: miColonia.			miPosicion = miColonia				ifTrue: [ miColonia recibirMensaje: mensaje.					Transcript						show: 'Entrege un mensaje';						cr.					mensaje := nil ] ]! !Morph subclass: #HormigaVisual	instanceVariableNames: 'miColonia miMundoVisual miCelda'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!HormigaVisual commentStamp: '32 7/31/2017 22:29' prior: 0!Clase visual padre de las hormigas visuales.!!HormigaVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 16:31'!setMiCelda:argmiCelda :=arg.! !!HormigaVisual methodsFor: 'Modificadoras' stamp: 'asd 7/21/2017 16:37'!setMiColonia:argmiColonia :=arg.! !!HormigaVisual methodsFor: 'as yet unclassified' stamp: 'YAUPe 7/9/2017 19:39'!initialize	|origen |	super initialize.	self color: Color transparent .	origen:=self innerBounds origin.! !!HormigaVisual methodsFor: 'as yet unclassified' stamp: '32 7/30/2017 16:54'!update: accion	"accion con valor de 1 a 4 indican movimiento,con 5 indica que se murio la hormiga, 6 que pertence a la colonia ganadora"	self firstSubmorph color: Color black.	accion = 1		ifTrue: [ miCelda getLeft isNil				ifFalse: [ miCelda getLeft addMorphCentered: self.					miCelda := miCelda getLeft ] ]		ifFalse: [ accion = 2				ifTrue: [ miCelda getRight isNil						ifFalse: [ miCelda getRight addMorphCentered: self.							miCelda := miCelda getRight ] ]				ifFalse: [ accion = 3						ifTrue: [ miCelda getTop isNil								ifFalse: [ miCelda getTop addMorphCentered: self.									miCelda := miCelda getTop ] ]						ifFalse: [ accion = 4								ifTrue: [ miCelda getBot isNil										ifFalse: [ miCelda getBot addMorphCentered: self.											miCelda := miCelda getBot ] ]								ifFalse: [ accion = 5										ifTrue: [ self delete ]										ifFalse: [ accion = 6												ifTrue: [ self firstSubmorph color: Color orange ] ] ] ] ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HormigaVisual class	instanceVariableNames: ''!!HormigaVisual class methodsFor: 'as yet unclassified' stamp: '32 7/28/2017 23:05'!crearMiC: unaColoniaVisual miCelda: unaCeldaVisual	| h |	h := self new.	h setMiColonia: unaColoniaVisual.	h setMiCelda: unaCeldaVisual.	^ h! !HormigaVisual subclass: #ExploradoraVisual	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!ExploradoraVisual commentStamp: '32 7/31/2017 22:27' prior: 0!Clase visual de Exploradora.!!ExploradoraVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/18/2017 17:07'!initialize	| c |	super initialize.	c := 'E' asMorph.	c color: Color transparent.	self addMorphCentered: c! !HormigaVisual subclass: #GuerreraVisual	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!GuerreraVisual commentStamp: '32 7/31/2017 22:27' prior: 0!Clase visual de Guerrera.!!GuerreraVisual methodsFor: 'as yet unclassified' stamp: 'YAUPe 7/9/2017 19:39'!initialize|c|	super initialize.	c:='G' asMorph .		c color: Color transparent .		self addMorphCentered: c.! !Object subclass: #Mundo	instanceVariableNames: 'matrizMundo misColonias'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Mundo commentStamp: '32 7/31/2017 22:28' prior: 0!Clase que representa al mundo de la simulacion. Esta clase contendra una matriz llena de celdas que funcionara como el mundo. Tambien se encarga de inicializar la simulacion y de ejecutarla.!!Mundo methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:26'!eliminarColonia: unaColonia	"Metodo que establece el estado de una colonida como muerta"	unaColonia setMuerta! !!Mundo methodsFor: 'Aplicacion' stamp: 'sdf 8/1/2017 23:59'!ejecutarSimulacion	| contMuertas coloniasMuertas |	contMuertas := 0.	coloniasMuertas := OrderedCollection new.	misColonias size > 1		ifTrue: [ [ misColonias size > 1 ]				whileTrue: [ misColonias						do: [ :cadColonia | 							cadColonia estoyViva								ifTrue: [ cadColonia ejecutarColonia ]								ifFalse: [ (coloniasMuertas includes: cadColonia)										ifFalse: [ contMuertas := contMuertas + 1.											coloniasMuertas add: cadColonia ] ] ].					Transcript						show: 'Paso un turno';						cr ].			Transcript show: 'Gano una colonia.' ]		ifFalse:[Transcript show: 'Ingrese al menos una colonia']! !!Mundo methodsFor: 'Aplicacion' stamp: 'sdf 7/18/2017 19:31'!agregarUnaColonia: unaCoordenada obreras: ob exploradoras: ex guerreras: gu colVisual: unaColVisual	"creado para grafica"	| coloniaN |	coloniaN := Colonia		crearColoniaAutomatica: unaCoordenada		mundo: self		obreras: ob		exploradoras: ex		guerreras: gu.	matrizMundo at: unaCoordenada getX at: unaCoordenada getY put: coloniaN.	misColonias add: coloniaN.	coloniaN addDependent: unaColVisual.	coloniaN agregarDependientes: unaColVisual submorphs! !!Mundo methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:27'!recuperarX: unValor1 Y: unValor2	"Metodo que retorna la celda que se encuentra en la posicion recibida como parametro"	^ matrizMundo at: unValor1 at: unValor2! !!Mundo methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:26'!cambiarCeldax: valor1 y: valor2 cambio: unaCelda	"Metodo que recibe por parametro un valor x y un valor y, y reemplaza la celda que se encuentra en esa posicion de la matriz por la celda recibida por parametro"	matrizMundo at: valor1 at: valor2 put: unaCelda! !!Mundo methodsFor: 'Inicializador' stamp: '32 7/31/2017 23:26'!iniCeldasAut	"Metodo que hace una precarga de colonias y fuentes de comida al mundo"	| coloniaAux |	coloniaAux := Colonia		crearCelda: (Coordenada crearCoordenadax: 6 y: 2).	self cambiarCeldax: 6 y: 2 cambio: coloniaAux.	misColonias add: coloniaAux.	coloniaAux := Colonia		crearCelda: (Coordenada crearCoordenadax: 2 y: 5).	self cambiarCeldax: 2 y: 5 cambio: coloniaAux.	misColonias add: coloniaAux.	coloniaAux := Colonia		crearCelda: (Coordenada crearCoordenadax: 9 y: 6).	self cambiarCeldax: 9 y: 6 cambio: coloniaAux.	misColonias add: coloniaAux.	coloniaAux := Colonia		crearCelda: (Coordenada crearCoordenadax: 5 y: 9).	self cambiarCeldax: 5 y: 9 cambio: coloniaAux.	misColonias add: coloniaAux.	self		cambiarCeldax: 1		y: 9		cambio:			(FuenteComida crearCelda: (Coordenada crearCoordenadax: 1 y: 9)).	self		cambiarCeldax: 3		y: 3		cambio:			(FuenteComida crearCelda: (Coordenada crearCoordenadax: 3 y: 3)).	self		cambiarCeldax: 5		y: 5		cambio:			(FuenteComida crearCelda: (Coordenada crearCoordenadax: 5 y: 5)).	self		cambiarCeldax: 9		y: 3		cambio:			(FuenteComida crearCelda: (Coordenada crearCoordenadax: 9 y: 3)).	self		cambiarCeldax: 3		y: 8		cambio:			(FuenteComida crearCelda: (Coordenada crearCoordenadax: 3 y: 8)).	self		cambiarCeldax: 7		y: 8		cambio:			(FuenteComida crearCelda: (Coordenada crearCoordenadax: 7 y: 8)).	self		cambiarCeldax: 2		y: 10		cambio:			(FuenteComida				crearCelda: (Coordenada crearCoordenadax: 2 y: 10))! !!Mundo methodsFor: 'Inicializador' stamp: '32 7/31/2017 23:27'!iniMundo	"Metodo que crea una matriz llena de celdas"	| celdaAux coordAux |	matrizMundo := Matrix new: 10.	1 to: 10 do: [ :i | 		1 to: 10 do: [ :j | 			coordAux := Coordenada crearCoordenadax: i y: j.			celdaAux := CeldaMundo crearCelda: coordAux.			matrizMundo at: i at: j put: celdaAux ] ].	misColonias := OrderedCollection new! !!Mundo methodsFor: 'Inicializador' stamp: '32 7/31/2017 23:27'!iniHormigasAut	"Metodo que realiza una precarga de hormigas a las colonias"	misColonias		do: [ :unaColonia | unaColonia cargaAutomatica: self ]! !!Mundo methodsFor: 'Inicializador' stamp: '32 7/31/2017 23:27'!iniMundoAut	"Metodo que realiza una precarga del mundo"	| celdaAux coordAux contColonias |	contColonias := 0.	matrizMundo := Matrix new: 10.	misColonias := OrderedCollection new.	1 to: 10 do: [ :i | 		1 to: 10 do: [ :j | 			coordAux := Coordenada crearCoordenadax: i y: j.			celdaAux := CeldaMundo crearCelda: coordAux.			matrizMundo at: i at: j put: celdaAux ] ].	self iniCeldasAut.	self iniHormigasAut! !!Mundo methodsFor: 'as yet unclassified' stamp: 'sdf 7/9/2017 21:34'!agregarUnaFuenteDeComida: unaCoordenada fuenteV: fuenteVisual"creado para grafica"	|fuente|	fuente := FuenteComida  crearFuenteAutomatica: unaCoordenada.	matrizMundo at: unaCoordenada getX at: unaCoordenada getY put:fuente.	fuente addDependent: fuenteVisual.! !!Mundo methodsFor: 'as yet unclassified' stamp: 'sdf 8/2/2017 00:02'!ejecutarTurno	| cantVivas |	cantVivas := misColonias select: [ :i | i estoyViva ].	cantVivas size < 1		ifTrue: [ Transcript show: 'Ingrese al menos una colonia'.			self changed: 1 ]		ifFalse: [ cantVivas size = 1				ifTrue: [ Transcript show: 'Gano una Colonia'.					(cantVivas at: 1) resaltar.					self changed: 1 ]				ifFalse: [ misColonias						do: [ :col | 							col estoyViva								ifTrue: [ col ejecutarColonia ] ].					Transcript						show: 'Paso un turno';						cr ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mundo class	instanceVariableNames: ''!!Mundo class methodsFor: 'constructor' stamp: 'sdf 7/5/2017 19:39'!crear|mundo|mundo:=self new.mundo iniMundo.^mundo! !!Mundo class methodsFor: 'constructor' stamp: 'AgustinVidal 6/23/2017 23:20'!precargaAutomatica	| mundo |	mundo := self new.	mundo iniMundoAut.	^ mundo! !BorderedMorph subclass: #MundoVisual	instanceVariableNames: 'botonIniciar botonEjecutarTurno botonCerrar botonSimulacion cortarSimulacion botonCuadroDeTexto mundoVisual mundo'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!MundoVisual commentStamp: '32 7/31/2017 22:28' prior: 0!Clase visual de Mundo.!!MundoVisual methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:10'!ejecutarSimulacionmundo  ejecutarSimulacion.! !!MundoVisual methodsFor: 'Aplicacion' stamp: '32 7/31/2017 22:10'!ejecutarTurnomundo ejecutarTurno! !!MundoVisual methodsFor: 'Observadoras' stamp: 'sdf 7/18/2017 19:21'!getMundo^mundo! !!MundoVisual methodsFor: 'as yet unclassified' stamp: '32 7/31/2017 22:10'!stepmundo ejecutarTurno.! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'YAUPe 7/6/2017 15:37'!openInWorld super openInWorld.self stopStepping.! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'sdf 8/1/2017 20:59'!initialize	| origen ancho alto botonDetener |	super initialize.	self color: Color paleGreen.	self position: 700 @ 400.	self bounds: (self position extent: 700 @ 500).	mundo := Mundo crear.	mundo addDependent: self.	mundoVisual := Matrix		rows: 10		columns: 10		tabulate: [ :i :j | 			CeldaMundoVisual				crearNuevaCeldaFila: i				columna: j				cuadro: self				mundo: mundo				mundoVisual: self ].	ancho := (mundoVisual at: 1 at: 1) width.	alto := (mundoVisual at: 1 at: 1) height.	self bounds: (self position extent: (10 * ancho + 200) @ (10 * alto + 50)).	"En las proximas lineas se le agrega a cada celda sus celdas top,right,left y bot"	1 to: 10 do: [ :i | 		1 to: 10 do: [ :j | 			i < 10				ifTrue: [ (mundoVisual at: i at: j) agregarHermanoB: (mundoVisual at: i + 1 at: j) ].			i > 1				ifTrue: [ (mundoVisual at: i at: j) agregarHermanoT: (mundoVisual at: i - 1 at: j) ].			j > 1				ifTrue: [ (mundoVisual at: i at: j) agregarHermanoL: (mundoVisual at: i at: j - 1) ].			j < 10				ifTrue: [ (mundoVisual at: i at: j) agregarHermanoR: (mundoVisual at: i at: j + 1) ] ] ].	botonCerrar := BotonAccion new.	botonEjecutarTurno := BotonAccion new.	botonDetener := BotonAccion new.	botonSimulacion := BotonAccion new.	self addMorph: botonCerrar.	self addMorph: botonEjecutarTurno.	self addMorph: botonDetener.	self addMorph: botonSimulacion.	origen := self innerBounds origin.	botonSimulacion position: origen + (550 @ 50).	botonEjecutarTurno position: origen + (550 @ 80).		botonDetener position: origen + (550 @ 110).	botonCerrar position: origen + (550 @ 140).	botonCerrar label: 'Cerrar'.	botonEjecutarTurno label: 'EjecutarTurno'.	botonDetener label: 'Detener'.	botonSimulacion label: 'Comenzar Simulacion'.	botonSimulacion mouseAction: [ self startStepping ].	botonEjecutarTurno mouseAction: [ self ejecutarTurno ].	botonDetener mouseAction: [ self stopStepping ].	botonCerrar mouseAction: [ self delete ]! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'asd 7/22/2017 17:22'!stepTime^100! !!MundoVisual methodsFor: 'as yet unclassified' stamp: '32 7/28/2017 20:53'!update:aux	"variable aux para que funcione update" 	self stopStepping ! !!MundoVisual methodsFor: 'Modificadoras' stamp: 'sdf 7/9/2017 21:30'!agregarFuente: pos	| c |	c := FuenteComidaVisual new.	c position: pos.	self addMorph: c.	^ c! !!MundoVisual methodsFor: 'Modificadoras' stamp: '32 7/28/2017 23:22'!agregarColonia: posCol obreras: ob exploradoras: ex guerreras: gu coor: unaCoordenada miCelda: arg	| c |	c := ColoniaVisual new.	c position: posCol.	c agregarHermanoB: arg getBot.	c agregarHermanoT: arg getTop.	c agregarHermanoL: arg getLeft.	c agregarHermanoR: arg getRight.	arg addMorph: c.	1 to: ex do: [ :e | c addMorphCentered: (ExploradoraVisual crearMiC: c miCelda: arg) ].	1 to: gu do: [ :gue | c addMorphCentered: (GuerreraVisual crearMiC: c miCelda: arg) ].	1 to: ob do: [ :f | c addMorphCentered: (ObreraVisual crearMiC: c miCelda: arg) ].	mundo		agregarUnaColonia: unaCoordenada		obreras: ob		exploradoras: ex		guerreras: gu		colVisual: c! !!MundoVisual methodsFor: 'Modificadoras' stamp: 'sdf 7/9/2017 20:13'!nuevaCeldaFila: i columna: j"Crea una celda para la posición (i,j) y la agrega al mundo visual."| c origen |c:= CeldaMundoVisual new.origen := self innerBounds origin.self addMorph: c.c position: ((j- 1) * (c width )) @ ((i - 1) * (c height )) + origen + (10@25).^c.! !!MundoVisual methodsFor: 'Modificadoras' stamp: 'sdf 7/9/2017 21:25'!cambiarCeldax: valor1 y: valor2 cambio: unaCelda	mundoVisual at: valor1 at: valor2 put: unaCelda! !HormigaVisual subclass: #ObreraVisual	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!ObreraVisual commentStamp: '32 7/31/2017 22:28' prior: 0!Clase visual de Obrera.!!ObreraVisual methodsFor: 'as yet unclassified' stamp: 'sdf 7/18/2017 17:04'!initialize	| c |	super initialize.	c := 'O' asMorph.	c color: Color transparent.	self addMorphCentered: c! !Hormiga subclass: #Reina	instanceVariableNames: 'comidaActual'	classVariableNames: 'ComidaMax'	poolDictionaries: ''	category: 'TpObligatorio'!!Reina commentStamp: '32 7/31/2017 22:27' prior: 0!Clase que representa a la reina. Esta no se mueve del hormigero, solo se alimenta y crea nuevas hormigas. Si esta muere su colonia muere.!!Reina methodsFor: 'as yet unclassified' stamp: '32 7/31/2017 23:17'!comer	"Metodo que se encarga de hacer que la reina coma"	| comio |	comio := super comer.	comio		ifTrue: [ comidaActual := comidaActual + 1 ].	^ comio! !!Reina methodsFor: 'as yet unclassified' stamp: '32 7/31/2017 23:18'!soyReina"Metodo que retorna true si la hormiga que recibe el mensaje es Reina"^true! !!Reina methodsFor: 'Modificadores' stamp: 'sdf 6/18/2017 18:58'!setComidaActual: cant	""	comidaActual:= cant.! !!Reina methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:17'!inicializarAux	"Metodo polimorfico que inicializa los atributos especificos de reina"	self setComidaActual: 0.	ComidaMax := 5! !!Reina methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:16'!actuar	"Metodo que se encarga de hacer actuar a una reina"	| comio |	comio := self comer.	(comio and: comidaActual = ComidaMax)		ifTrue: [ self reproducirse.			self setComidaActual: 0 ]! !!Reina methodsFor: 'Aplicacion' stamp: 'sdf 8/2/2017 00:13'!reproducirse	"Metodo que hace que la reina se reproduzca y genere una nueva hormiga o no"	| aux hormigaNueva hormigaVisual colVisual |	aux := 10 atRandom.	aux >= 9		ifFalse: [ aux >= 3				ifTrue:					[ hormigaNueva := Obrera crearHormiga: miColonia mundo: miMundo.					colVisual := miColonia myDependents at: 1.					hormigaVisual := ObreraVisual						crearMiC: colVisual						miCelda: colVisual owner.					hormigaNueva addDependent: hormigaVisual.					colVisual addMorphCentered: hormigaVisual.					Transcript						show: 'Nacio una obrera';						cr ]				ifFalse: [ aux >= 5						ifTrue: [ hormigaNueva := Exploradora								crearHormiga: miColonia								mundo: miMundo.							colVisual := miColonia myDependents at: 1.							hormigaVisual := ExploradoraVisual								crearMiC: colVisual								miCelda: colVisual owner.							hormigaNueva addDependent: hormigaVisual.							colVisual addMorphCentered: hormigaVisual.							Transcript								show: 'Nacio una Exploradora';								cr ]						ifFalse: [ hormigaNueva := Guerrera								crearHormiga: miColonia								mundo: miMundo.							colVisual := miColonia myDependents at: 1.							hormigaVisual := GuerreraVisual								crearMiC: colVisual								miCelda: colVisual owner.							hormigaNueva addDependent: hormigaVisual.							colVisual addMorphCentered: hormigaVisual.							Transcript								show: 'Nacio una Guerrera';								cr ] ].			miColonia agregarHormiga: hormigaNueva ]! !Hormiga subclass: #Trabajadora	instanceVariableNames: 'objetivo cargaActual'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Trabajadora commentStamp: '32 7/31/2017 22:28' prior: 0!Clase que agrupa a las guerreras y a las obreras debido a ciertas similaridades en su comportamiento, principalmente que ambas reciben un objetive de su colonia, se mueven a  él y cuando llegan al mismo ejecutan una accion.!!Trabajadora methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:19'!iniObjetivo	"Metodo que inicializa el objetivo de una hormiga"	objetivo := miColonia! !!Trabajadora methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:18'!enviarObjetivo: unObjetivo	"Metodo que recibe una celda como parametro y la establece como el objetivo de una hormiga"	objetivo := unObjetivo! !!Trabajadora methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:20'!inicializarAux	"Metodo polimorfico que inicializa una trabajadora"	self iniObjetivo! !!Trabajadora methodsFor: 'Observadores' stamp: '32 7/31/2017 23:19'!getObjetivo	"Metodo que retorna la celda objetivo de una hormiga"	^ objetivo! !!Trabajadora methodsFor: 'Observadores' stamp: '32 7/31/2017 23:22'!tieneObjetivo"Metodo que retorna true si la hormiga no posee objetivo, false en caso contrario"	^ objetivo isNil! !!Trabajadora methodsFor: 'Observadores' stamp: '32 7/31/2017 23:21'!setCargaActual: unaCantidad	"Metodo que le pone como carga actual de comida, a la hormiga que recibe el mensaje, la cantidad que recibe por parametro"	cargaActual := unaCantidad.! !!Trabajadora methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:18'!actuar2	self subclassResponsibility! !!Trabajadora methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:18'!actuar	"Metodo polimorfico que se encarga de hacer actuar a las hormigas trabajadoras, es decir a las obreras y guerreras"	objetivo = miPosicion		ifTrue: [ objetivo = miColonia				ifTrue: [ self comer ].			self actuar2 ]		ifFalse: [ self moverse: objetivo ]! !Trabajadora subclass: #Guerrera	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Guerrera commentStamp: '32 7/31/2017 22:28' prior: 0!Clase que representa a las hormigas guerreras. Estas se mantienen dentro del hormiguero hasta que su colonia les da la orden de ir a atacar a otra colonia. Tambien se encargan de defender a su colonia en caso de un ataque.!!Guerrera methodsFor: 'Aplicacion' stamp: 'sdf 8/2/2017 00:14'!actuar2	"Metodo que se encarga de hacer actuar a una guerrera"	| res |	(objetivo equals: miColonia)		ifFalse: [ objetivo estoyViva				ifTrue: [ res := objetivo pelear: self.					res						ifTrue: [ objetivo estoyViva								ifFalse: [ self setCargaActual: objetivo darBotin ] ]						ifFalse: [ miColonia eliminarHormiga: self ] ]				ifFalse: [ objetivo := miColonia.					Transcript						show: 'Victoria GG WP';						cr ] ]! !Trabajadora subclass: #Obrera	instanceVariableNames: 'realizado capacidad'	classVariableNames: ''	poolDictionaries: ''	category: 'TpObligatorio'!!Obrera commentStamp: '32 7/31/2017 22:28' prior: 0!Clase que representa a las hormigas obreras. Estas se mantienen dentro del hormigero hasta que su colonia les da la orden de ir a recolectar alimento a un lugar especifico del mundo.!!Obrera methodsFor: 'Aplicacion' stamp: '32 7/31/2017 23:57'!actuar2	"Metodo que se encarga de hacer actuar a una obrera"	(objetivo equals: miColonia)		ifTrue: [ self getRealizado				ifTrue: [ (miPosicion equals: miColonia)						ifFalse: [ self moverse: objetivo ]						ifTrue: [ self setRealizado: false.							miColonia entregarComida: cargaActual.							self setCargaActual: 0 ] ] ]		ifFalse: [ (objetivo equals: miPosicion)				ifTrue: [ cargaActual := objetivo sustraerComida.					objetivo := miColonia.					self setRealizado: true ] ]! !!Obrera methodsFor: 'as yet unclassified' stamp: '32 7/31/2017 23:44'!setRealizado: arg	"Metodo que pone la condicion de realizado en true/false, segun el parametro recibido"	realizado := arg! !!Obrera methodsFor: 'as yet unclassified' stamp: '32 7/31/2017 23:23'!getRealizado"Metodo que retorna true si la hormiga ya recolecto comida"^realizado ! !!Obrera methodsFor: 'Modificadores' stamp: '32 7/31/2017 23:57'!inicializarAux	"Metodo polimorfico que inicializa los atributos especificos de obrera"	super inicializarAux.	self setCargaActual: 0.	self setRealizado: false! !